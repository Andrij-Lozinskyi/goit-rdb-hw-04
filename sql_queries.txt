USE LibraryManagement;


CREATE TABLE authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    author_name VARCHAR(255) NOT NULL
);


CREATE TABLE genres (
    genre_id INT AUTO_INCREMENT PRIMARY KEY,
    genre_name VARCHAR(100) NOT NULL
);


CREATE TABLE books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    publication_year YEAR NOT NULL,
    author_id INT,
    genre_id INT,
    FOREIGN KEY (author_id) REFERENCES authors(author_id),
    FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
);


CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL
);


CREATE TABLE borrowed_books (
    borrow_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT,
    user_id INT,
    borrow_date DATE,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES books(book_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);



INSERT INTO authors (author_name) VALUES ('Dan Abnett'), ('Stephen King');


INSERT INTO genres (genre_name) VALUES ('Fiction'), ('Horror');


INSERT INTO books (title, publication_year, author_id, genre_id)
VALUES ('Warhammer 40000', 2000, 1, 1),
       ('It', 1975, 2, 2);


INSERT INTO users (username, email)
VALUES ('ivan_k', 'ivan@test.test'),
       ('olena_p', 'olena@test.test');


INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date)
VALUES (1, 1, '2025-06-01', '2025-06-10'),
       (2, 2, '2025-06-05', NULL);

---------------------------------------------------------------------------------------

USE store_db;

SELECT * FROM categories c
  INNER JOIN products p ON c.id = p.category_id
  INNER JOIN suppliers s ON p.supplier_id = s.id
  INNER JOIN order_details od ON p.id = od.product_id
  INNER JOIN orders o ON od.order_id = o.id
  INNER JOIN shippers sh ON o.shipper_id = sh.id
  INNER JOIN customers cu ON o.customer_id = cu.id
  INNER JOIN employees e ON o.employee_id = e.employee_id;
  
SELECT COUNT(*) AS total_rows
FROM categories c
  INNER JOIN products p ON c.id = p.category_id
  INNER JOIN suppliers s ON p.supplier_id = s.id
  INNER JOIN order_details od ON p.id = od.product_id
  INNER JOIN orders o ON od.order_id = o.id
  INNER JOIN shippers sh ON o.shipper_id = sh.id
  INNER JOIN customers cu ON o.customer_id = cu.id
  INNER JOIN employees e ON o.employee_id = e.employee_id;
  
  
SELECT COUNT(*) AS total_rows
FROM categories c
  INNER JOIN products p ON c.id = p.category_id
  LEFT JOIN suppliers s ON p.supplier_id = s.id
  RIGHT JOIN order_details od ON p.id = od.product_id
  INNER JOIN orders o ON od.order_id = o.id
  RIGHT JOIN shippers sh ON o.shipper_id = sh.id
  LEFT JOIN customers cu ON o.customer_id = cu.id
  RIGHT JOIN employees e ON o.employee_id = e.employee_id;

-- Кількість рядків змінюється, бо у випадку INNER JOIN ми вибираємо тільки спільні id з таблиць. У випадку RIGHT і LEFT ми вибираємо усі рядки з правої таблички і 
-- спільні з лівої, або усі з лівої і спільні з правої відповідно. Де значення не співпадає буде null.  
  
SELECT * FROM employees as e
WHERE e.employee_id > 3 AND e.employee_id <= 10;

SELECT 
    COUNT(od.order_id) AS total_rows,
    AVG(od.quantity) AS avg_quantity
FROM
    order_details od
GROUP BY od.order_id;

SELECT od.order_id, AVG(od.quantity) AS avg_quantity
FROM order_details od
GROUP BY od.order_id
HAVING AVG(od.quantity) > 21;


SELECT od.order_id, AVG(od.quantity) AS avg_quantity
FROM order_details od
GROUP BY od.order_id
HAVING AVG(od.quantity) > 21
ORDER BY od.order_id DESC;

SELECT od.order_id, AVG(od.quantity) as avg_quantity
FROM order_details od
GROUP BY od.order_id
HAVING AVG(od.quantity) > 21
ORDER BY od.order_id DESC
LIMIT 4 OFFSET 1;
